{"version":3,"sources":["components/FlagRecord/index.js"],"names":["moment","locale","FlagRecord","state","value","tasks","getListData","year","month","day","date","_this","props","list","length","filter","e","split","y","m","d","map","item","type","is_true","content","punch_title","punch_id","dateCellRender","listData","react__WEBPACK_IMPORTED_MODULE_11___default","a","createElement","className","key","antd_lib_badge__WEBPACK_IMPORTED_MODULE_5___default","status","text","getIsTrue","success","error","monthCellRender","num","handlePanelChange","mode","setState","concat","handleSelect","ajax","token","window","localStorage","getItem","res","parseData","code","data","this","handleSetAllTasks","userInfo","antd_lib_calendar__WEBPACK_IMPORTED_MODULE_1___default","onPanelChange","onSelect","react_router_dom__WEBPACK_IMPORTED_MODULE_14__","to","Component","connect","global","allTasks","dispatch","setAllTasks"],"mappings":"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","file":"static/js/20.d8318a57.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Calendar, Badge } from 'antd'\r\nimport { connect } from 'react-redux'\r\nimport { setAllTasks } from '../../redux/actions/global'\r\nimport { Redirect } from 'react-router-dom'\r\nimport parseData from '../../utils/parseData'\r\nimport ajax from '../../config/ajax'\r\nimport moment from 'moment'\r\nimport './index.less'\r\nmoment.locale('zh-cn')\r\n\r\nclass FlagRecord extends Component {\r\n    state = {\r\n        value: moment(),\r\n        tasks: []\r\n    }\r\n    getListData = value => {\r\n        let year = value.year()\r\n        let month = value.month() + 1\r\n        let day = value.date()\r\n        let { tasks } = this.props\r\n        let list = []\r\n        if (tasks.length) {\r\n            list = tasks.filter(e => {\r\n                let date = e.date.split('-')\r\n                let y = +date[0]\r\n                let m = +date[1]\r\n                let d = +date[2]\r\n                return year === y &&  month === m && day === d\r\n            })\r\n            list = list.map(item => {\r\n                return {\r\n                    type: item.is_true === 'true' ? 'success' : 'error',\r\n                    content: item.punch_title,\r\n                    punch_id: item.punch_id\r\n                }\r\n            })\r\n        }\r\n        return list\r\n    }\r\n\r\n    dateCellRender = value => {\r\n        const listData = this.getListData(value);\r\n        return (\r\n          <ul className=\"events\">\r\n            {\r\n              listData.map(item => (\r\n                <li key={item.punch_id}>\r\n                  <Badge status={item.type} text={item.content} />\r\n                </li>\r\n              ))\r\n            }\r\n          </ul>\r\n        );\r\n    }\r\n\r\n    getIsTrue = value => {\r\n        let month = value.month() + 1\r\n        let { tasks } = this.props\r\n        let list = tasks.filter(e => {\r\n            let date = e.date.split('-')\r\n            let m = +date[1]\r\n            return m === month && e.is_true\r\n        })\r\n        return {\r\n            success: list.length,\r\n            error: tasks.length - list.length\r\n        }\r\n    }\r\n\r\n    monthCellRender = value => {\r\n        const num = this.getIsTrue(value)\r\n        let { tasks } = this.props\r\n        return num.error !== tasks.length ? (\r\n          <div className=\"notes-month\">\r\n            <section>\r\n                <p>完成{num.success}个Flag</p>\r\n                <p>未完成{num.error}个Flag</p>\r\n            </section>\r\n          </div>\r\n        ) : null;\r\n    }\r\n\r\n    handlePanelChange = (date, mode) => {\r\n        let year = date.year()\r\n        let month = date.month()\r\n        let day = date.date()\r\n        this.setState({\r\n            value: moment(`${year}-${month + 1}-${day}`)\r\n        })\r\n    }\r\n    async componentDidMount() {\r\n        const res = await ajax('/getAllTasks', { token: window.localStorage.getItem('token') })\r\n        const { code, data } = parseData(res)\r\n        if (code === 0) {\r\n            this.props.handleSetAllTasks(data)\r\n        }\r\n    }\r\n    handleSelect = date => {\r\n        let year = date.year()\r\n        let month = date.month()\r\n        let day = date.date()\r\n        this.setState({\r\n            value: moment(`${year}-${month + 1}-${day}`)\r\n        })\r\n    }\r\n    render() {\r\n        const { userInfo } = this.props\r\n        if (!userInfo.token && !window.localStorage.getItem('token')) {\r\n            return <Redirect to='/login'/>\r\n        }\r\n        return (\r\n            <div className='record'>\r\n                <Calendar \r\n                    value={this.state.value} \r\n                    dateCellRender={this.dateCellRender} \r\n                    monthCellRender={this.monthCellRender} \r\n                    onPanelChange={this.handlePanelChange}\r\n                    onSelect={this.handleSelect}\r\n                />,\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    userInfo: state.global.userInfo,\r\n    tasks: state.global.allTasks\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    handleSetAllTasks(data) {\r\n        dispatch(setAllTasks(data))\r\n    }\r\n})\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FlagRecord)"],"sourceRoot":""}